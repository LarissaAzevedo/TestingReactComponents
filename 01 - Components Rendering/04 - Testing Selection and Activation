import React from "react";
import TestRenderer from "react-test-renderer";
import RoverSelector from "./RoverSelector";
import { rovers } from "../pages/ConnectRoverSearch";

describe("RoverSelector", () => {
  describe("rendering", () => {
    describe("selection", () => {
      describe("all selected", () => {
        it("should select all rovers", () => {
          const all = { spirit: true, opportunity: true, curiosity: true };
          const tr = TestRenderer.create(
            <RoverSelector
              rovers={rovers}
              roversActive={all}
              roverSelection={all}
              onRoverSelection={() => {}}
            />
          );
          const inputs = tr.root.findAllByProps({
            "data-testId": "rover-selected",
          });
          inputs.forEach((inputs) => {
            expect(inputs.props.checked).toBe(true);
          });
        });
      });

      describe("none selected", () => {
        describe("should select no rovers", () => {
          const none = { spirit: false, opportunity: false, curiosity: false };
          const tr = TestRenderer.create(
            <RoverSelector
              rovers={rovers}
              roversActive={none}
              roverSelection={none}
              onRoverSelection={() => {}}
            />
          );
          const inputs = tr.root.findAllByProps({
            "data-testId": "rover-selected",
          });
          inputs.forEach((inputs) => {
            expect(inputs.props.checked).toBe(false);
          });
        });
      });
    });

    describe("activaton", () => {
      const inactiveCssClassExpression = /.*RoverSelector-inactive/;
      describe("all active", () => {
        it("should not have the inactive class", () => {
          const all = { spirit: true, opportunity: true, curiosity: true };
          const tr = TestRenderer.create(
            <RoverSelector
              rovers={rovers}
              roversActive={all}
              roverSelection={all}
              onRoverSelection={() => {}}
            />
          );

          const divs = tr.root.findAll((instance) =>
            (instance.props["data-testid"] || "").starsWith("rover-div-")
          );
          divs.forEach((div) => {
            expect(div.props.className).not.toMatch(inactiveCssClassExpression);
          });
        });
      });

      describe("all inactive", () => {
        describe("should have the inactive class", () => {
          const none = { spirit: false, opportunity: false, curiosity: false };
          const tr = TestRenderer.create(
            <RoverSelector
              rovers={rovers}
              roversActive={none}
              roverSelection={none}
              onRoverSelection={() => {}}
            />
          );

          const divs = tr.root.findAll((instance) =>
            (instance.props["data-testid"] || "").starsWith("rover-div-")
          );
          divs.forEach((div) => {
            expect(div.props.className).toMatch(inactiveCssClassExpression);
          });
        });
      });

      describe("mixed", () => {
        describe("should have the inactive class for inactive rovers", () => {
          const activation = {
            spirit: false,
            opportunity: true,
            curiosity: true,
          };
          const tr = TestRenderer.create(
            <RoverSelector
              rovers={rovers}
              roversActive={activation}
              roverSelection={activation}
              onRoverSelection={() => {}}
            />
          );

          Object.keys(activation).forEach((roverName) => {
            const div = tr.root.findByProps({
              "data-testid": "rover-div-" + roverName,
            });

            if (activation[roverName]) {
              expect(div.props.className).not.toMatch(
                inactiveCssClassExpression
              );
            } else {
              expect(div.props.className).toMatch(inactiveCssClassExpression);
            }
          });
          
        });
      });
    });
  });
});
